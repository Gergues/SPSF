<#@ template language="C#" #>
<#@ include file="Templates/Text/BCS/BCSFunctions.t4" #>// <copyright file="<#= GeneratedFileName #>" company="<#= CopyrightCompanyName #>">
// Copyright <#= CopyrightCompanyName #>. All rights reserved.
// </copyright>
// <author><#= System.Environment.UserDomainName #>\\<#= System.Environment.UserName #></author>
// <date><#= System.DateTime.Now.ToString("u") #></date>
// <auto-generated>
//   Generated with SharePoint Software Factory 4.1
// </auto-generated>
namespace <#= ProjectNamespace #>.<#= BCSModelName #>
{
	using System;
	using System.Collections.Generic;
	using System.Linq;
	using System.Text;
	using System.Data;

	// Base class to share connection string retrieval for all entities
	[System.CodeDom.Compiler.GeneratedCode("SPSF", "4.1")]
	public class <#= BCSModelName #>Service
	{
		protected static string GetConnectionString()
        {
			// Please replace the following connectionstring with a configurable value, e.g. from web.config or from the property bag
            return @"Integrated Security=SSPI;Persist Security Info=False;Initial Catalog=<#= BCSDatabase #>;Data Source=<#= BCSServer #>";
        }
	}

<#

int count = 0;
foreach(BCSEntity entity in BCSModel.Entities)
{
#>
    /// <summary>
    /// All the methods for retrieving, updating and deleting data are implemented in this class file.
    /// The samples below show the finder and specific finder method for Entity1.
    /// </summary>
	[System.CodeDom.Compiler.GeneratedCode("SPSF", "4.1")]
    public class <#= entity.Name #>EntityService : <#= BCSModelName #>Service
    {      
		<#
		if(entity.CreateReadOperation)
		{
			#>
			public static <#= entity.Name #> <#= entity.ReadItemOperationName #>(<# WriteAllKeys(entity); #>)
			{
				var context = new <#= BCSDatabase #>.<#= BCSDatabase #>Context(GetConnectionString());
				IEnumerable<<#= entity.Name #>> entities = from entity in context.<#= entity.Name #>
				<#
				WriteLINQWhereClause(entity, "entity");
				#>
                                                select new <#= entity.Name #>
                                                {
													<# 
													WriteLINQValueAssignment(entity, "entity"); 
													#>
												};

				return entities.FirstOrDefault();
			}

			public static IEnumerable<<#= entity.Name #>> <#= entity.ReadListOperationName #>()
			{
				var context = new <#= BCSDatabase #>.<#= BCSDatabase #>Context(GetConnectionString());
				IEnumerable<<#= entity.Name #>> entities = from entity in context.<#= entity.Name #>
                                                select new <#= entity.Name #>
                                                {
													<# WriteLINQValueAssignment(entity, "entity"); #>
												};
				return entities;
			}
			<#
		}

		if(entity.CreateCreateOperation)
		{
			#>

			public static <#= entity.Name #> <#= entity.CreateOperationName #>(<#= entity.Name #> newentity)
			{
				var context = new <#= BCSDatabase #>.<#= BCSDatabase #>Context(GetConnectionString());
				<#= BCSDatabase #>.<#= entity.Name #> createdEntity = new <#= BCSDatabase #>.<#= entity.Name #>
				{
					<# WriteLINQValueAssignment(entity, "newentity"); #>
                };
				context.<#= entity.Name #>.InsertOnSubmit(createdEntity);
				context.SubmitChanges();

				//return the newly created item
				return <#= entity.ReadItemOperationName #>(<#

				count = 0;
				foreach(BCSField field in entity.Fields)
				{
					if(field.IsKey)
					{
						if(count > 0)
						{
							#>, <#
						}
						#>createdEntity.<#= field.Name #><#
						count++;
					}
				}
			
				#>);
			}
			<#
		}
	
		if(entity.CreateDeleteOperation)
		{
			#>

			public static void <#= entity.DeleteOperationName #>(<# WriteAllKeys(entity); #>)
			{
				var context = new <#= BCSDatabase #>.<#= BCSDatabase #>Context(GetConnectionString());
				<#= BCSDatabase #>.<#= entity.Name #> deletedEntity = (from entity in context.<#= entity.Name #>
										<# 
										WriteLINQWhereClause(entity, "entity");
										#>
										select entity).FirstOrDefault();

				context.<#= entity.Name #>.DeleteOnSubmit(deletedEntity);
				context.SubmitChanges();
			}
			<#
		}

		if(entity.CreateUpdateOperation)
		{
			#>

			public static void <#= entity.UpdateOperationName #>(<#= entity.Name #> update<#= entity.Name #><#
				//add all keys as preupdaterfields

				if(!EntityHasKeyWithIdentity(entity))
				{
					//needs preupdaterfields
					foreach(BCSField field in GetUpdateWhereClauseFieldsPreUpdate(entity))
					{
						#>, <#= field.DataType.ToString() #> preupdate<#= field.Name #><#		
					}
				}	

				#>)
			{
				var context = new <#= BCSDatabase #>.<#= BCSDatabase #>Context(GetConnectionString());
				<#= BCSDatabase #>.<#= entity.Name #> existingEntity = (from entity in context.<#= entity.Name #>
										<# 
										if(!EntityHasKeyWithIdentity(entity))
										{
											//needs preupdaterfields
											foreach(BCSField field in GetUpdateWhereClauseFieldsPreUpdate(entity))
											{
												#>
												where entity.<#= field.Name #> == preupdate<#= field.Name #>
												<#		
											}
										}	
										else
										{
											foreach(BCSField field in entity.Fields)
											{
												if(field.IsKey)
												{
													#>
													where entity.<#= field.Name #> == update<#= entity.Name #>.<#= field.Name #>
													<#		
												}
											}
										}
										#>
										select entity).FirstOrDefault();

				<#
				foreach(BCSField field in entity.Fields)		
				{
					#>
					existingEntity.<#= field.Name #> = update<#= entity.Name #>.<#= field.Name #>;
					<#
				}
				#>

				context.SubmitChanges();
			}
			<#
		}

		foreach(BCSEntity entityWhichReferencesMe in GetAssocationsToMe(entity))
		{
			foreach(BCSField fieldWithReference in entityWhichReferencesMe.Fields)
			{
				if(fieldWithReference.ReferencedEntity == entity.Name)
				{
					if(BCSModel.IsValidAssociation(fieldWithReference))
					{
						#>

						public static IEnumerable<<#= entityWhichReferencesMe.Name #>> <#= fieldWithReference.AssociationName #>(<#= GetTypeNameClass(fieldWithReference) #> <#= fieldWithReference.Name #>)
						{
							var context = new <#= BCSDatabase #>.<#= BCSDatabase #>Context(GetConnectionString());
							IEnumerable<<#= entityWhichReferencesMe.Name #>> entities = from entity in context.<#= entityWhichReferencesMe.Name #>
																  where entity.<#= fieldWithReference.ReferencedField #> == <#= fieldWithReference.Name #>
																  select new <#= entityWhichReferencesMe.Name #>
																  {
																	<# WriteLINQValueAssignment(entityWhichReferencesMe, "entity"); #>
																  };
							return entities;
						}
						<#
					}
				}
			}
		}
		#>
	}
<#
}
#>
}
