<#@ template language="C#" #>
<#@ include file="Templates/Text/BCS/BCSFunctions.t4" #>// <copyright file="<#= GeneratedFileName #>" company="<#= CopyrightCompanyName #>">
// Copyright <#= CopyrightCompanyName #>. All rights reserved.
// </copyright>
// <author><#= System.Environment.UserDomainName #>\\<#= System.Environment.UserName #></author>
// <date><#= System.DateTime.Now.ToString("u") #></date>
// <auto-generated>
//   Generated with SharePoint Software Factory 4.1
// </auto-generated>
namespace <#= ProjectNamespace #>.<#= BCSModelName #>
{
	using System;
	using System.Collections.Generic;
	using System.Linq;
	using System.Text;
	using System.Data;
	using System.Data.Sql;
	using System.Data.SqlClient;
	using System.Data.SqlTypes;

	// Base class to share connection string retrieval for all entities
	[System.CodeDom.Compiler.GeneratedCode("SPSF", "4.1")]
	public class <#= BCSModelName #>Service
	{
		protected static SqlConnection getSqlConnection()
        {
			// Please replace the following connectionstring with a configurable value, e.g. from web.config or from the property bag
            SqlConnection sqlConn = new SqlConnection("Integrated Security=SSPI;Persist Security Info=False;Initial Catalog=<#= BCSDatabase #>;Data Source=<#= BCSServer #>");
            return (sqlConn);
        }
	}
<#

int count = 0;
foreach(BCSEntity entity in BCSModel.Entities)
{
#>
    /// <summary>
    /// All the methods for retrieving, updating and deleting data are implemented in this class file.
    /// The samples below show the finder and specific finder method for Entity1.
    /// </summary>
	[System.CodeDom.Compiler.GeneratedCode("SPSF", "4.1")]
    public class <#= entity.Name #>EntityService : <#= BCSModelName #>Service
    {      
		<#
		if(entity.CreateReadOperation)
		{
			#>
			public static <#= entity.Name #> <#= entity.ReadItemOperationName #>(<#

			count = 0;
			foreach(BCSField field in entity.Fields)
			{
				if(field.IsKey)
				{
					if(count > 0)
					{
						#>, <#
					}
					#><#= field.DataType.ToString() #> <#= field.Name #><#
					count++;
				}
			}
			
			#>)
			{
				SqlConnection thisConn = null;
				<#= entity.Name #> entity = null;
				
				entity = new <#= entity.Name #>();
				thisConn = getSqlConnection();
				thisConn.Open();
				SqlCommand selectCommand = new SqlCommand();
				selectCommand.CommandText = "<# WriteSelectItemQuery(entity); #>";
				<#
				//add parameters to the command
				foreach(BCSField field in entity.Fields)
				{
					if(field.IsKey)
					{
						#>
						selectCommand.Parameters.AddWithValue("@<#= field.Name #>", <#= field.Name #>); 
						<#
					}
				}
				#>

				selectCommand.Connection = thisConn;
				SqlDataReader thisReader = selectCommand.ExecuteReader(CommandBehavior.CloseConnection);
				if (thisReader.Read())
				{
					<#
					foreach(BCSField field in entity.Fields)		
					{
					#>
					entity.<#= field.Name #> = <# WriteValueAssignment(field, "thisReader"); #>;
					<#
					}
					#>
				}
				else
				{
					throw new Exception("Data not found");
				}
				thisReader.Close();
				return (entity);
			}

			public static IEnumerable<<#= entity.Name #>> <#= entity.ReadListOperationName #>()
			{
				SqlConnection thisConn = null;
				List<<#= entity.Name #>> allEntities = new List<<#= entity.Name #>>();

				thisConn = getSqlConnection();
				thisConn.Open();
				SqlCommand selectCommand = new SqlCommand();
				selectCommand.Connection = thisConn;
				selectCommand.CommandText = "<# WriteSelectAllQuery(entity); #>";
				SqlDataReader thisReader =  selectCommand.ExecuteReader(CommandBehavior.CloseConnection);
				while (thisReader.Read())
				{
					<#= entity.Name #> entity = new <#= entity.Name #>();
						
					<#
					foreach(BCSField field in entity.Fields)		
					{
					#>
					entity.<#= field.Name #> = <# WriteValueAssignment(field, "thisReader"); #>;
					<#
					}
					#>

					allEntities.Add(entity);
				}
				thisReader.Close();
				return allEntities;
			}
			<#
		}

		if(entity.CreateCreateOperation)
		{
			#>

			public static <#= entity.Name #> <#= entity.CreateOperationName #>(<#= entity.Name #> newentity)
			{
				<#= entity.Name #> createdEntity = null;
				SqlConnection thisConn = null;
				try
				{
					thisConn = getSqlConnection();
					thisConn.Open();

					SqlCommand createCommand = new SqlCommand();
					createCommand.Connection = thisConn;
					createCommand.CommandText = "<# WriteCreateQuery(entity); #>";
					<#
					foreach(BCSField field in entity.Fields)		
					{
					#>
					createCommand.Parameters.AddWithValue("@<#= field.Name #>", <# WriteCommandParameterAdd(field, "newentity"); #>); 
					<#
					}
					#>					

					SqlDataReader thisReader = createCommand.ExecuteReader(CommandBehavior.CloseConnection);
					if (thisReader.Read())
					{
						createdEntity = new <#= entity.Name #>();

						<#
						foreach(BCSField field in entity.Fields)		
						{
						#>
						createdEntity.<#= field.Name #> = <# WriteValueAssignment(field, "thisReader"); #>;
						<#
						}
						#>
					}
					else
					{
						throw new Exception("Data not found");
					}
					return createdEntity;
				}
				finally
				{
					thisConn.Dispose();
				}
			}
			<#
		}
	
		if(entity.CreateDeleteOperation)
		{
			#>

			public static void <#= entity.DeleteOperationName #>(<#

			count = 0;
			foreach(BCSField field in entity.Fields)
			{
				if(field.IsKey)
				{
					if(count > 0)
					{
						#> ,<#
					}
					#><#= field.DataType.ToString() #> <#= field.Name #><#
					count++;
				}
			}
			
			#>)
			{
				SqlConnection thisConn = null;
				try
				{
					thisConn = getSqlConnection();
					thisConn.Open();

					SqlCommand deleteCommand = new SqlCommand();
					deleteCommand.Connection = thisConn;
					deleteCommand.CommandText = "<# WriteDeleteStatement(entity); #>";
					<#
					foreach(BCSField field in entity.Fields)		
					{
						if(field.IsKey)
						{
							#>
							deleteCommand.Parameters.AddWithValue("@<#= field.Name #>", <#= field.Name #>); 
							<#
						}
					}
					#>
					deleteCommand.ExecuteNonQuery();
				}
				finally
				{
					thisConn.Dispose();
				}

			}

			<#
		}

		if(entity.CreateUpdateOperation)
		{
			#>

			public static void <#= entity.UpdateOperationName #>(<#= entity.Name #> update<#= entity.Name #><#
				//add all keys as preupdaterfields

				if(!EntityHasKeyWithIdentity(entity))
				{
					//needs preupdaterfields
					foreach(BCSField field in GetUpdateWhereClauseFieldsPreUpdate(entity))
					{
						#>, <#= field.DataType.ToString() #> preupdate<#= field.Name #><#		
					}
				}	

				#>)
			{
				SqlConnection thisConn = null;
				try
				{
					thisConn = getSqlConnection();
					thisConn.Open();
					
					SqlCommand updateCommand = new SqlCommand();
					updateCommand.Connection = thisConn;
					updateCommand.CommandText = "<# WriteUpdateQuery(entity); #>";
					
					//add new field values
					<#
					foreach(BCSField field in GetUpdateFields(entity))		
					{
						#>
						updateCommand.Parameters.AddWithValue("@<#= field.Name #>", <# WriteCommandParameterAdd(field, "update" + entity.Name); #>); 
						<#
					}
					#>

					<#

					if(EntityHasKeyWithIdentity(entity))
					{
						foreach(BCSField field in GetUpdateWhereClauseFields(entity))
						{
							#>
							updateCommand.Parameters.AddWithValue("@<#= field.Name #>", update<#= entity.Name #>.<#= field.Name #>); 
							<#		
						}
					}
					else
					{	//needs preupdaterfields
						foreach(BCSField field in GetUpdateWhereClauseFieldsPreUpdate(entity))
						{
							#>
							updateCommand.Parameters.AddWithValue("@preupdate<#= field.Name #>", preupdate<#= field.Name #>); 
							<#		
						}
					}	

					#>

					updateCommand.ExecuteNonQuery();
				}
				finally
				{
					thisConn.Dispose();
				}
			}
			<#
		}

		foreach(BCSEntity entityWhichReferencesMe in GetAssocationsToMe(entity))
		{
			foreach(BCSField fieldWithReference in entityWhichReferencesMe.Fields)
			{
				if(fieldWithReference.ReferencedEntity == entity.Name)
				{
					if(BCSModel.IsValidAssociation(fieldWithReference))
					{
						#>
						public static IEnumerable<<#= entityWhichReferencesMe.Name #>> <#= fieldWithReference.AssociationName #>(<#= GetTypeNameClass(fieldWithReference) #> <#= fieldWithReference.Name #>)
						{
							SqlConnection thisConn = null;
							List<<#= entityWhichReferencesMe.Name #>> allEntities = new List<<#= entityWhichReferencesMe.Name #>>();

							thisConn = getSqlConnection();
							thisConn.Open();
							SqlCommand selectCommand = new SqlCommand();
							selectCommand.Connection = thisConn;
							selectCommand.CommandText = "<# WriteAssocationNavigatorQuery(entityWhichReferencesMe, fieldWithReference); #>";

							selectCommand.Parameters.AddWithValue("@<#= fieldWithReference.Name #>", <#= fieldWithReference.Name #>);

							SqlDataReader thisReader =  selectCommand.ExecuteReader(CommandBehavior.CloseConnection);
							while (thisReader.Read())
							{
								<#= entityWhichReferencesMe.Name #> entity = new <#= entityWhichReferencesMe.Name #>();
						
								<#
								foreach(BCSField field in entityWhichReferencesMe.Fields)	
								{
								#>
								entity.<#= field.Name #> = <# WriteValueAssignment(field, "thisReader"); #>;
								<#
								}
								#>

								allEntities.Add(entity);
							}
							thisReader.Close();
							return allEntities;
						}
						<#
					}
				}
			}
		}
		#>
	}
<#
}
#>
}
