<#@ template language="C#" #>
<#@ include file="Templates/Text/BCS/BCSFunctions.t4" #>// <copyright file="<#= GeneratedFileName #>" company="<#= CopyrightCompanyName #>">
// Copyright <#= CopyrightCompanyName #>. All rights reserved.
// </copyright>
// <author><#= System.Environment.UserDomainName #>\\<#= System.Environment.UserName #></author>
// <date><#= System.DateTime.Now.ToString("u") #></date>
// <auto-generated>
//   Generated with SharePoint Software Factory 4.1
// </auto-generated>
namespace <#= ProjectNamespace #>.<#= BCSModelName #>
{
	using System;
	using System.Collections.Generic;
	using System.Linq;
	using System.Text;
	using System.Data;
<#

int count = 0;
foreach(BCSEntity entity in BCSModel.Entities)
{
#>
    /// <summary>
    /// All the methods for retrieving, updating and deleting data are implemented in this class file.
    /// The samples below show the finder and specific finder method for Entity1.
    /// </summary>
	[System.CodeDom.Compiler.GeneratedCode("SPSF", "4.1")]
    public class <#= entity.Name #>EntityService
    {      
		<#
		if(entity.CreateReadOperation)
		{
			#>
			public static <#= entity.Name #> <#= entity.ReadItemOperationName #>(<#

			count = 0;
			foreach(BCSField field in entity.Fields)
			{
				if(field.IsKey)
				{
					if(count > 0)
					{
						#>, <#
					}
					#><#= field.DataType.ToString() #> <#= field.Name #><#
					count++;
				}
			}
			
			#>)
			{
				<#= entity.Name #> entity = new <#= entity.Name #>();
				
				// TODO: Set the properties of the entity
				
				return entity;
			}

			public static IEnumerable<<#= entity.Name #>> <#= entity.ReadListOperationName #>()
			{
				List<<#= entity.Name #>> allEntities = new List<<#= entity.Name #>>();

				// TODO: add the entities to the list

				return allEntities;
			}
			<#
		}

		if(entity.CreateCreateOperation)
		{
			#>

			public static <#= entity.Name #> <#= entity.CreateOperationName #>(<#= entity.Name #> newentity)
			{
				// TODO: Save the created entity to the repository

				return newentity;				
			}
			<#
		}
	
		if(entity.CreateDeleteOperation)
		{
			#>

			public static void <#= entity.DeleteOperationName #>(<#

			count = 0;
			foreach(BCSField field in entity.Fields)
			{
				if(field.IsKey)
				{
					if(count > 0)
					{
						#> ,<#
					}
					#><#= field.DataType.ToString() #> <#= field.Name #><#
					count++;
				}
			}
			
			#>)
			{
				// TODO: delete the entity from the repository
			}

			<#
		}

		if(entity.CreateUpdateOperation)
		{
			#>

			public static void <#= entity.UpdateOperationName #>(<#= entity.Name #> update<#= entity.Name #><#
				//add all keys as preupdaterfields

				if(!EntityHasKeyWithIdentity(entity))
				{
					//needs preupdaterfields
					foreach(BCSField field in GetUpdateWhereClauseFieldsPreUpdate(entity))
					{
						#>, <#= field.DataType.ToString() #> preupdate<#= field.Name #><#		
					}
				}	

				#>)
			{
				// TODO: Update the entity in the repository
			}
			<#
		}

		foreach(BCSEntity entityWhichReferencesMe in GetAssocationsToMe(entity))
		{
			foreach(BCSField fieldWithReference in entityWhichReferencesMe.Fields)
			{
				if(fieldWithReference.ReferencedEntity == entity.Name)
				{
					if(BCSModel.IsValidAssociation(fieldWithReference))
					{
						#>
						public static IEnumerable<<#= entityWhichReferencesMe.Name #>> <#= fieldWithReference.AssociationName #>(<#= GetTypeNameClass(fieldWithReference) #> <#= fieldWithReference.Name #>)
						{
							List<<#= entityWhichReferencesMe.Name #>> allEntities = new List<<#= entityWhichReferencesMe.Name #>>();

							// TODO: Provide all entities which match the given condition

							return allEntities;
						}
						<#
					}
				}
			}
		}
		#>
	}
<#
}
#>
}
