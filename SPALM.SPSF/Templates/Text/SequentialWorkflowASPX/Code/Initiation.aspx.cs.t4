<#@ template language="C#" #>
<#@ property processor="PropertyProcessor" name="WorkflowNamespace" #>
<#@ property processor="PropertyProcessor" name="WorkflowName" #>
<#@ property processor="PropertyProcessor" name="ResourceFilename" #>
<#@ assembly name="System.dll" #>
using System;
using System.IO;
using System.Text;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;
using System.Xml;
using System.Xml.Serialization;
using Microsoft.SharePoint;
using Microsoft.SharePoint.Utilities;
using Microsoft.SharePoint.WebControls;
using Microsoft.SharePoint.Workflow;

namespace <#= WorkflowNamespace #>
{
    /// <summary>
    /// Initializaiton Form to start a new workflow 
    /// </summary>
    public class <#= WorkflowName #>Initiation : LayoutsPageBase
    {
        #region Protected fields
        // controls
        // Protected control definitions goes here

        // form-level variables
        protected SPList List;
        protected SPListItem ListItem;
        protected string ListItemName;
        protected string ListItemUrl;
        protected SPContentType CType;
        protected SPWorkflowAssociation WorkflowAssociation;
        protected SPWorkflowTemplate WorkflowTemplate;
        protected string WorkflowAssociationName;
        protected string AssociationData;
        protected string InitiationData;

        protected string PageTitle;
        protected string PageTitleInArea;
        protected string PageDescription;

        #endregion

        #region Protectged Event Methods
        /// <summary>
        /// Retrieve Parameters and Set Local Variables, Set also Page Title and Description
        /// </summary>
        /// <param name="e"></param>
        protected override void OnLoad(EventArgs e)
        {
            RetrieveParamSetVars();

            PageTitle = GetResourceString("PageTitle");
            PageTitleInArea = string.Format(GetResourceString("PageTitleInArea"), ListItemName);
            PageDescription = string.Format(GetResourceString("PageDescription"), ListItemName, WorkflowAssociationName);
        }

        /// <summary>
        /// Populate From Data to the front End
        /// </summary>
        /// <param name="e"></param>
        protected override void OnPreRender(EventArgs e)
        {
            PopulateFormDataFromString(WorkflowAssociation.AssociationData);
        }

        /// <summary>
        /// Redirect to the Default view url of the current list.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        public void Cancel_OnClick(object sender, EventArgs e)
        {
            SPUtility.Redirect(List.DefaultViewUrl,
                               SPRedirectFlags.Default,
                               HttpContext.Current);
        }

        /// <summary>
        /// Start the Worklfow after clicking the ok button
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        public void Ok_OnClick(object sender, EventArgs e)
        {
            try
            {
                InitiationData = SerializeFormDataToString();

                Web.Site.WorkflowManager.StartWorkflow(ListItem,
                                                       WorkflowAssociation,
                                                       InitiationData);
            }
            catch (Exception ex)
            {
                SPException spEx = ex as SPException;

                string errorString;

                if (spEx != null && spEx.ErrorCode == -2130575205 /* SPErrorCode.TP_E_WORKFLOW_ALREADY_RUNNING */)
                    errorString = SPResource.GetString(Strings.WorkflowFailedAlreadyRunningMessage);
                else if (spEx != null && spEx.ErrorCode == -2130575339 /* SPErrorCode.TP_E_VERSIONCONFLICT */)
                    errorString = SPResource.GetString(Strings.ListVersionMismatch);
                else if (spEx != null && spEx.ErrorCode == -2130575338 /* SPErrorCode.TP_E_LISTITEMDELETED */)
                    errorString = spEx.Message;
                else
                    errorString = SPResource.GetString(Strings.WorkflowFailedStartMessage);

                SPUtility.Redirect("Error.aspx",
                                   SPRedirectFlags.RelativeToLayoutsPage,
                                   HttpContext.Current,
                                   "ErrorText=" + SPHttpUtility.UrlKeyValueEncode(errorString));
            }

            SPUtility.Redirect(List.DefaultViewUrl,
                              SPRedirectFlags.Default,
                              HttpContext.Current);
        }

        #endregion

        #region Private Helper Methods
        /// <summary>
        /// Get the Resource String for this page
        /// </summary>
        /// <param name="resourceID">ID of the resource to get</param>
        /// <returns>Localized string</returns>
        private static string GetResourceString(string resourceID)
        {
            resourceID = string.Format("<#= WorkflowName #>Initiation_{0}", resourceID);
            return HttpContext.GetGlobalResourceObject("<#= ResourceFilename #>", resourceID).ToString();
        }

        /// <summary>
        /// Retrieve the Parameters ans Set the local variables
        /// </summary>
        private void RetrieveParamSetVars()
        {
            string paramList = Request.Params["List"];
            string paramID = Request.Params["ID"];
            string paramCType = Request.Params["ctype"];
            string paramTemplateID = Request.Params["TemplateID"];

            List = Web.Lists[new Guid(paramList)];
            ListItem = List.GetItemById(Convert.ToInt32(paramID));

            Guid WorkflowAssociationID = new Guid(Request.Params["TemplateID"]);
            WorkflowAssociation = List.WorkflowAssociations[WorkflowAssociationID];
            if (WorkflowAssociation == null)
            { 
                SPContentTypeId CTypeID = (SPContentTypeId)ListItem["ContentTypeId"];
                CType = List.ContentTypes[CTypeID];
                WorkflowAssociation = CType.WorkflowAssociations[WorkflowAssociationID];
            }

            if (WorkflowAssociation == null)
                throw new SPException("The requested workflow could not be found.");

            WorkflowAssociationName = WorkflowAssociation.Name;
            AssociationData = (string)WorkflowAssociation.AssociationData;
            WorkflowTemplate = Web.WorkflowTemplates[WorkflowAssociation.BaseId];

            if (ListItem.File == null)
                ListItemUrl = Web.Url + ListItem.ParentList.Forms[PAGETYPE.PAGE_DISPLAYFORM].ServerRelativeUrl + "?ID=" + ListItem.ID.ToString();
            else
                ListItemUrl = Web.Url + "/" + ListItem.File.Url;

            if (List.BaseType == SPBaseType.DocumentLibrary)
            {
                ListItemName = (string)ListItem["Name"];
                int i = ListItemName.LastIndexOf('.');
                if (i > 0)
                    ListItemName = ListItemName.Substring(0, i);
            }
            else
                ListItemName = (string)ListItem["Title"];
        }

        /// <summary>
        /// Convert the string from the associated data t an <#= WorkflowName #>Data data object
        /// </summary>
        /// <param name="AssociationData"></param>
        protected void PopulateFormDataFromString(string AssociationData)
        {
            XmlSerializer serializer = new XmlSerializer(typeof(<#= WorkflowName #>Data));
            XmlTextReader reader = new XmlTextReader(new StringReader(AssociationData));
            <#= WorkflowName #>Data FormData = (<#= WorkflowName #>Data)serializer.Deserialize(reader);

            //Code to populate data to the form
        }

        /// <summary>
        /// Serialize a <#= WorkflowName #>Data object to an string to associate with the workflow
        /// </summary>
        /// <returns></returns>
        protected string SerializeFormDataToString()
        {
            <#= WorkflowName #>Data FormData = new <#= WorkflowName #>Data();

            //Code to read the data from the form and write them to the Data Object (PXXXWFData)

            using (MemoryStream stream = new MemoryStream())
            {
                XmlSerializer serializer = new XmlSerializer(typeof(<#= WorkflowName #>Data));
                serializer.Serialize(stream, FormData);
                stream.Position = 0;
                byte[] bytes = new byte[stream.Length];
                stream.Read(bytes, 0, bytes.Length);
                return Encoding.UTF8.GetString(bytes);
            }
        }

        #endregion
    }
}
