<#@ template language="C#" #>
<#@ property processor="PropertyProcessor" name="CopyrightCompanyName" #>
<#@ property processor="PropertyProcessor" name="CopyrightFileName" #>
<#@ property processor="PropertyProcessor" name="ThemeJobNamespace" #>
<#@ property processor="PropertyProcessor" name="ThemeJobClass" #>
<#@ assembly name="System.dll" #>
// <copyright file="<#= CopyrightFileName #>" company="<#= CopyrightCompanyName #>">
// Copyright <#= CopyrightCompanyName #>. All rights reserved.
// </copyright>
// <author><#= System.Environment.UserDomainName #>\\<#= System.Environment.UserName #></author>
// <date><#= System.DateTime.Now.ToString("u") #></date>
namespace <#= ThemeJobNamespace #>
{
  using System;
  using System.Diagnostics;
  using System.IO;
  using System.Xml;
  using System.Xml.XPath;
  using Microsoft.SharePoint;
  using Microsoft.SharePoint.Administration;
  using Microsoft.SharePoint.Utilities;

  /// <summary>
  ///   The job definition which installs the theme to the farm
  /// </summary>
  public class <#= ThemeJobClass #> : SPJobDefinition
  {
    private const string ERR_FEATURE_NOT_FOUND = "Feature '{0}' not found in farm.";
    
    private const string ERR_MISSING_PROPERTY = "Feature '{0}' is missing property '{1}'.";

    private const string SPTHEMES_PATH = @"TEMPLATE\LAYOUTS\1033\SPTHEMES.XML";

    [Persisted]
    private Guid _featureId = Guid.Empty;
    [Persisted]
    private bool _delete = false;

    /// <summary>
    ///     Initializes a new instance of the <#= ThemeJobClass #> class.
    /// </summary>
    public <#= ThemeJobClass #>() : base()
    { 
    }

    /// <summary>
    ///     Initializes a new instance of the <#= ThemeJobClass #> class.
    /// </summary>
    /// <param name="service">the SPService</param>
    /// <param name="featureId">the guid of the feature</param>
    /// <param name="delete">specifies if the Theme should be deleted</param>
    public <#= ThemeJobClass #>(SPService service, Guid featureId, bool delete)
      : base("Feature Themes", service, null, SPJobLockType.None)
    {
      _featureId = featureId;
      _delete = delete;
    }

    internal string ThemesFilePath
    {
        get
        {
            SPFeatureDefinition featureDef = Farm.FeatureDefinitions[_featureId];
            if (featureDef == null)
            {
                throw new SPException(string.Format(ERR_FEATURE_NOT_FOUND, _featureId));
            }

            return Path.Combine(featureDef.RootDirectory, "SPTHEMES.XML");
        }
    }

    /// <summary>
    ///     Installs the theme
    /// </summary>
    /// <param name="def">the SPFeatureDefinition of the theme</param>
    public static void InstallThemes(SPFeatureDefinition def)
    {
        MergeFeatureThemes(def, false);
    }

    /// <summary>
    ///     Deletes the theme
    /// </summary>
    /// <param name="def">the SPFeatureDefinition of the theme</param>
    public static void DeleteThemes(SPFeatureDefinition def)
    {
        MergeFeatureThemes(def, true);
    }

    /// <summary>
    ///     Submits the job
    /// </summary>
    public void SubmitJobNow()
    {
        if (Farm.TimerService.Instances.Count < 1)
        {
            throw new SPException("Could not run job. Timer service not found.");
        }

        foreach (SPJobDefinition job in Service.JobDefinitions)
        {
            if (job.Name == this.Name)
            {
                job.Delete();
            }
        }

      this.Schedule = new SPOneTimeSchedule(DateTime.Now.AddHours(-2));
      this.Title = string.Format("{0} Themes for Feature {1}", (_delete ? "Delete" : "Install"), _featureId);
      this.Update();
    }

    /// <summary>
    ///     Executes the job
    /// </summary>
    /// <param name="targetInstanceId">the ID of the target instance</param>
    public override void Execute(Guid targetInstanceId)
    {
      DoMerge(SPUtility.GetGenericSetupPath(SPTHEMES_PATH), ThemesFilePath);
    }

    /// <summary>
    ///     Merges the path of the theme
    /// </summary>
    /// <param name="pathToSPThemes">the path to the location of the sharepoint themes</param>
    /// <param name="pathToMerge">the path to merge</param>
    public void DoMerge(string pathToSPThemes, string pathToMerge)
    {
      try
      {
        XmlDocument docThemes = new XmlDocument();
        docThemes.Load(pathToSPThemes);
        string namespaceThemes = docThemes.DocumentElement.NamespaceURI;

        XPathNavigator navThemes = docThemes.CreateNavigator();
        XmlNamespaceManager mgrThemes = new XmlNamespaceManager(navThemes.NameTable);
        mgrThemes.AddNamespace("t", namespaceThemes);

        XmlDocument docMerge = new XmlDocument();
        docMerge.Load(pathToMerge);

        XPathNavigator navMerge = docMerge.CreateNavigator();
        XmlNamespaceManager mgrMerge = new XmlNamespaceManager(navMerge.NameTable);
        mgrMerge.AddNamespace("t", docMerge.DocumentElement.NamespaceURI);

        bool shouldSave = false;

        XmlNodeList mergeNodes = docMerge.SelectNodes("/t:SPThemes/t:Templates/t:TemplateID", mgrMerge);
        foreach (XmlNode mergeNode in mergeNodes)
        {
          try
          {
            string xpath = string.Format("/t:SPThemes/t:Templates[t:TemplateID = '{0}']", mergeNode.InnerText);

            XmlNode node = docThemes.SelectSingleNode(xpath, mgrThemes);
            if (_delete)
            {
                if (node != null)
                {
                    node.ParentNode.RemoveChild(node);
                }
            }
            else
            {
              XmlNode newNodeParent = mergeNode.ParentNode;
              XmlElement toInsert = docThemes.CreateElement(newNodeParent.Name, namespaceThemes);
              toInsert.InnerXml = newNodeParent.InnerXml;
              foreach (XmlElement xe in toInsert.ChildNodes)
              {
                  xe.RemoveAllAttributes();
              }

              if (node == null)
              {
                  docThemes.DocumentElement.AppendChild(toInsert);
              }
              else
              {
                  node.ParentNode.ReplaceChild(toInsert, node);
              }
            }

            shouldSave = true;
          }
          catch (Exception ex)
          {
            Debug.WriteLine("Error importing theme '" + mergeNode.InnerText + "'!");
            Debug.WriteLine(ex);
          }
        }

        if (shouldSave)
        {
            docThemes.Save(pathToSPThemes);
        }
      }
      catch (XmlException ex)
      {
        Debug.WriteLine("Failed to merge themes");
        Debug.WriteLine(ex);
        throw;
      }
    }

    /// <summary>
    ///     Merges the feature themes
    /// </summary>
    /// <param name="def">the SPFeatureDefinition</param>
    /// <param name="delete">perform delete action</param>
    private static void MergeFeatureThemes(SPFeatureDefinition def, bool delete)
    {
        if (def == null)
        {
            throw new ArgumentNullException("def");
        }

        SPFarm f = def.Farm;
        if (f == null)
        {
            f = SPFarm.Local;
        }

        foreach (SPWebService svc in new SPWebServiceCollection(f))
        {
            <#= ThemeJobClass #> itj = new <#= ThemeJobClass #>(svc, def.Id, delete);
            itj.SubmitJobNow();
        }
    }
  }
}